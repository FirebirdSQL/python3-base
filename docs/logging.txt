.. module:: firebird.base.logging
   :synopsis: Context-based logging

###############################
logging - Context-based logging
###############################

.. versionchanged:: 2.0.0

Overview
========

This module provides context-based logging system built on top of standard `logging` module.
It also solves the common logging management problem when various modules use hard-coded
separate loggers, and provides several types of message wrappers that allow lazy message
interpolation using f-string, brace (`str.format`) or dollar (`string.Template`) formats.

The context-based logging:

1. Adds context information into `~logging.LogRecord`, that could be used in logging entry formats.
2. Allows assignment of loggers to specific contexts.

Basics
------

Normally, when you want to use a logger, you call the `logging.getLogger` function and
pass it a logger name (or not to get the `root` logger). The common (and recommended) practice
is to use `getLogger(__name__)` which often leads to logging configuration problems as complex
applications with many modules (including used libraries) may create complex logger hierarchy.

Our `logging` module solves the problem by replacing the logger name with `agent` identification.
The `agent` is typically an unit of code that works in specific execution contexts. For
example a code that process client request in web application (where request is the `context`),
or executes SQL command (the context could be a `database connection`). In most cases, the
`agent` is an instance of some class.

So, from user's perspective, the context logging is used similarly to normal Python logging -
but you pass the `agent` identification instead logger name to `.get_logger` function. If `agent`
identification is a string, it's used as is. If it's an object, it uses value of its `_agent_name_`
attribute if defined, otherwise it uses name in "MODULE_NAME.CLASS_QUALNAME" format. If
`_agent_name_` value is not a string, it's converted to string.

The typical usage pattern inside a class is therefore::

    logger = get_logger(self)

or for direct use::

    get_logger(self).debug("message")

The `.get_logger` also has an optional `topic` string parameter that could be used to
differentiate between various logging "streams". For example the `~firebird.base.trace` module
uses context logging with topic "trace", so it's possible to configure the logging system
to handle "trace" output in specific way.

The underlying machinery behind `.get_logger` function maps the `agent` and its context to
particular `~logging.Logger`, and returns a `.ContextLoggerAdapter` that you can use as normal
logger. This adapter is responsible to add context information into `~logging.LogRecord`.

Context information
-------------------
The conext information added by `.ContextLoggerAdapter` into `~logging.LogRecord` consists
from next items:

agent:
   String representation of the agent identification described above.
context:
   Agent context that could be defined via `log_context` attribute on `agent` instance, or
   by assigning its value directly to `extra['context']` on adapter returned by `.get_logger()`
   function.
domain:
   A name assigned to a group of agents (more about that later).
topic:
   Name of a logging stream.

They could be used in `~logging.Formatter` templates. If you want to use logging that combines
normal and context logging, it's necessary to assign `~ContextFilter` to your `logging.Handler`
to add (empty) context information into `LogRecords` that are produced by normal loggers.

LoggingManager
--------------
The `firebird.base.logging` module defines a global `.LoggingManager` instance `logging_manager`
that manages several mappings and implements the `~.LoggingManager.get_logger` method.

Some methods are also provided as global functions for conveniense: `.get_logger`,
`.set_agent_mapping`, `.set_domain_mapping` and `.get_agent_name`.

Mappings and Logger names
-------------------------

The `~logging.Logger` wrapped by the `.get_logger` function is determined by applying the
values ​​of several parameters to the logger name format. These parameters are:

- Domain: String used to group output from agents.
- Topic: String identification of particular logging stream.

The logger name format is a list that can contain any number of string values and at most
one occurrence of `DOMAIN` or `TOPIC` enum values. Empty strings are removed.

The final `~logging.Logger` name is constructed by joining elements of this list with
dots, and with sentinels replaced with `domain` and `topic` names.

For example, if values are defined as::

   logger_fmt = ['app', DOMAIN, TOPIC]
   domain = 'database'
   topic = 'trace'

the Logger name will be: "app.database.trace"

The logger name format is defined in `.LoggingManager.logger_fmt` property, and it's an
empty list by default, which means that `.get_logger` function always maps to **root** logger.

The `domain` is determined from `agent` passed to `.get_logger`. You can use `.set_domain_mapping`
to assign agent identifications to particular domain. The agents that are not assigned to domain
belong to default domain specifid in `.LoggingManager.default_domain`, which is `None` by default.

It's also possible to change agent identification used for logger name mapping porposes to
different value with `.set_agent_mapping` function.

Enums & Flags
=============
.. autoclass:: FormatElement
.. autoclass:: LogLevel

Constants
=========
.. autodata:: DOMAIN
.. autodata:: TOPIC

Functions
=========
.. autofunction:: get_logger
.. autofunction:: set_domain_mapping
.. autofunction:: set_agent_mapping
.. autofunction:: get_agent_name

Adapters and Filters
====================
.. autoclass:: ContextLoggerAdapter
.. autoclass:: ContextFilter

Logging manager
===============
.. autoclass:: LoggingManager

Messages
========
.. autoclass:: FStrMessage
.. autoclass:: BraceMessage
.. autoclass:: DollarMessage

Globals
=======
.. autodata:: logging_manager
   :no-value:
